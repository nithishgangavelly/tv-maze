[{"C:\\Users\\Nithish\\Desktop\\ReactApplication\\tv-maze\\src\\index.js":"1","C:\\Users\\Nithish\\Desktop\\ReactApplication\\tv-maze\\src\\registerServiceWorker.js":"2","C:\\Users\\Nithish\\Desktop\\ReactApplication\\tv-maze\\src\\App.js":"3","C:\\Users\\Nithish\\Desktop\\ReactApplication\\tv-maze\\src\\components\\dashboard\\Dashboard.js":"4","C:\\Users\\Nithish\\Desktop\\ReactApplication\\tv-maze\\src\\components\\showDetails\\ShowDetails.js":"5","C:\\Users\\Nithish\\Desktop\\ReactApplication\\tv-maze\\src\\components\\showDetails\\ShowList.js":"6","C:\\Users\\Nithish\\Desktop\\ReactApplication\\tv-maze\\src\\components\\service.js":"7","C:\\Users\\Nithish\\Desktop\\ReactApplication\\tv-maze\\src\\components\\dashboard\\DashboardStyles.js":"8","C:\\Users\\Nithish\\Desktop\\ReactApplication\\tv-maze\\src\\components\\showDetails\\ShowDetailsStyles.js":"9","C:\\Users\\Nithish\\Desktop\\ReactApplication\\tv-maze\\src\\components\\ScreenWidth.js":"10","C:\\Users\\Nithish\\Desktop\\ReactApplication\\tv-maze\\src\\components\\headerMenu\\HeaderMenu.js":"11","C:\\Users\\Nithish\\Desktop\\ReactApplication\\tv-maze\\src\\components\\showDetails\\ShowListStyles.js":"12","C:\\Users\\Nithish\\Desktop\\ReactApplication\\tv-maze\\src\\requestApi.js":"13","C:\\Users\\Nithish\\Desktop\\ReactApplication\\tv-maze\\src\\components\\headerMenu\\HeaderMenuStyles.js":"14"},{"size":357,"mtime":1608812326318,"results":"15","hashOfConfig":"16"},{"size":4501,"mtime":1608812326318,"results":"17","hashOfConfig":"16"},{"size":620,"mtime":1608813816923,"results":"18","hashOfConfig":"16"},{"size":2104,"mtime":1610458805352,"results":"19","hashOfConfig":"16"},{"size":7589,"mtime":1608812326318,"results":"20","hashOfConfig":"16"},{"size":4782,"mtime":1608876783843,"results":"21","hashOfConfig":"16"},{"size":641,"mtime":1608812326318,"results":"22","hashOfConfig":"16"},{"size":1013,"mtime":1608812326314,"results":"23","hashOfConfig":"16"},{"size":1563,"mtime":1608812326318,"results":"24","hashOfConfig":"16"},{"size":1051,"mtime":1608812326314,"results":"25","hashOfConfig":"16"},{"size":4996,"mtime":1608812326314,"results":"26","hashOfConfig":"16"},{"size":681,"mtime":1608812326318,"results":"27","hashOfConfig":"16"},{"size":220,"mtime":1608812326318,"results":"28","hashOfConfig":"16"},{"size":2446,"mtime":1608812326318,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1716v9s",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"32"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64"},"C:\\Users\\Nithish\\Desktop\\ReactApplication\\tv-maze\\src\\index.js",[],["65","66"],"C:\\Users\\Nithish\\Desktop\\ReactApplication\\tv-maze\\src\\registerServiceWorker.js",[],"C:\\Users\\Nithish\\Desktop\\ReactApplication\\tv-maze\\src\\App.js",[],"C:\\Users\\Nithish\\Desktop\\ReactApplication\\tv-maze\\src\\components\\dashboard\\Dashboard.js",["67","68","69"],"import React, { useEffect, useState } from 'react';\r\nimport clsx from 'clsx';\r\nimport ShowList from '../showDetails/ShowList';\r\nimport Header from '../headerMenu/HeaderMenu';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { useStyles } from \"./DashboardStyles\";\r\nimport { fetchData } from '../service';\r\n\r\nexport default function Dashboard() {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = useState(false);\r\n  const [showsInfo, setShowsInfo] = useState([]);\r\n  const [filterData, setFilterData] = useState([]);\r\n  const [genresInfo, setGenresInfo] = useState([]);\r\n  const [genresNames, setGenresNames] = useState('');\r\n  const [loader, setLoader] = useState(true);\r\n\r\n  useEffect(() => {\r\n    let genresValue = [];\r\n    let value = [];\r\n    fetchData().then(data => {\r\n      data.map((result) => {\r\n        result.genres.map((name) => {\r\n          genresValue.push(name)\r\n        })\r\n      })\r\n      let sortData = data;\r\n      sortData.sort(function (a, b) {\r\n        return b.rating.average - a.rating.average\r\n      });\r\n      value.push(...sortData);\r\n      let genres = [...new Set(genresValue)];\r\n      setGenresInfo(genres);\r\n      setShowsInfo(value);\r\n      setFilterData(value);\r\n      setLoader(false)\r\n    })\r\n  }, []);\r\n\r\n\r\n  const filteredData = (newValue) => {\r\n    setFilterData(newValue);\r\n  }\r\n  const filterShowsData = (newValue) => {\r\n    setFilterData(newValue);\r\n  }\r\n  const genresName = (genresName) => {\r\n    setGenresNames(genresName);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {loader ? <CircularProgress /> :\r\n        <div className={classes.root} data-test=\"dashboard-main\" id=\"scroller\">\r\n          <Header showsInfo={showsInfo} genresInfo={genresInfo} filterGenresData={filteredData}\r\n            filterShowsData={filterShowsData} genresName={genresName} />\r\n          <main className={clsx(classes.content, { [classes.contentShift]: open, })} >\r\n            <div className={classes.drawerHeader} />\r\n            <ShowList data={filterData} genresName={genresNames} />\r\n          </main>\r\n\r\n        </div>\r\n      }\r\n    </div>\r\n  );\r\n}","C:\\Users\\Nithish\\Desktop\\ReactApplication\\tv-maze\\src\\components\\showDetails\\ShowDetails.js",["70","71"],"import React, { useEffect, useState } from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { GridListTile, Typography } from '@material-ui/core';\r\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport GridList from '@material-ui/core/GridList';\r\nimport { Link } from 'react-router-dom';\r\nimport { useStyles } from './ShowDetailsStyles';\r\nimport HeaderMenu from '../headerMenu/HeaderMenu';\r\nimport ImageNotFound from './../../images/imageNotFound.png';\r\nimport { fetchData } from '../service';\r\nimport ScrollToTop from \"react-scroll-to-top\";\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport { StyledBreadcrumb, useWidth } from './../ScreenWidth';\r\n\r\nexport default function ShowDetails(props) {\r\n  const classes = useStyles();\r\n  const [showDetailsInfo, setShowDetailsInfo] = useState([]);\r\n  const [showSeasons, setShowSeasons] = useState([]);\r\n  const [loader, setLoader] = useState(true);\r\n\r\n  let widthSize = 2;\r\n\r\n  const width = useWidth();\r\n  if (width === \"xs\") {\r\n    widthSize = 2;\r\n  } else if (width === \"lg\" || width === \"md\" ||  width === \"xl\") {\r\n    widthSize = 9;\r\n  } else {\r\n    widthSize = 3;\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    const id = window.location.hash.slice(14);\r\n    fetchData('byMovie', id).then(movie => {\r\n      setShowDetailsInfo(movie);\r\n      setLoader(false);\r\n      return fetchData('bySeason', id).then(season => {\r\n        setShowSeasons(season)\r\n      })\r\n        .catch(error => {\r\n          console.log(error);\r\n        });\r\n\r\n    })\r\n  }, [setShowDetailsInfo]);\r\n\r\n  return (\r\n    <div>\r\n      {loader ?\r\n        <CircularProgress /> :\r\n        <div className={classes.root}>\r\n          <HeaderMenu />\r\n          {showDetailsInfo &&\r\n            <div className={classes.showDetailMain}>\r\n              <Grid container spacing={5} item xs={12} className={classes.breadcrumb}>\r\n\r\n                <Breadcrumbs aria-label=\"breadcrumb\">\r\n                  <Link to='/' style={{ textDecoration: 'none' }}>\r\n                    <StyledBreadcrumb\r\n                      href=\"#\"\r\n                      label=\"Home\"\r\n                      icon={<HomeIcon fontSize=\"small\" />}\r\n                    />\r\n                  </Link>\r\n\r\n                  {showDetailsInfo.name &&\r\n                    <StyledBreadcrumb label={showDetailsInfo.name} />}\r\n                </Breadcrumbs>\r\n              </Grid>\r\n              <Grid container spacing={2} className=\"gridSummary\">\r\n                <Grid item xs={12} lg={3} xl={3} md={3} sm={5}>\r\n                  <img className={classes.imageDisplay} src={showDetailsInfo.image && showDetailsInfo.image.medium} />\r\n                </Grid>\r\n                <Grid item lg={9} xl={9} md={9} sm={7}>\r\n                  {showDetailsInfo.summary &&\r\n                    <div>\r\n                      <Typography variant={'subtitle1'} className={classes.summary}>{showDetailsInfo.name}</Typography>\r\n                      <Typography variant={'subtitle1'} className={classes.fontInfo} dangerouslySetInnerHTML={{ __html: showDetailsInfo.summary }} />\r\n                    </div>\r\n                  }\r\n                  {showDetailsInfo && showDetailsInfo.rating &&\r\n                    <Typography variant={'subtitle1'} className={classes.paper}>\r\n                      <span className={classes.fontInfo}>Rating :</span> {showDetailsInfo.rating.average === null ?\r\n                        <span>NA</span> :\r\n                        <span>{showDetailsInfo.rating.average}</span>}\r\n                    </Typography>\r\n                  }\r\n                  {showDetailsInfo.language &&\r\n                    <Typography variant={'subtitle1'} className={classes.paper}>\r\n                      <span className={classes.fontInfo}>Language :</span> {showDetailsInfo.language}</Typography>}\r\n                  <Typography variant={'subtitle1'} className={classes.paper}>\r\n                    {showDetailsInfo.genres && <span className={classes.fontInfo}>Genres : </span>}\r\n                    {showDetailsInfo.genres && showDetailsInfo.genres.map((genres) => {\r\n                      return <span key={genres}>{genres + ','}</span>\r\n                    })\r\n                    }\r\n                  </Typography>\r\n                  <Typography variant=\"subtitle1\" className={classes.paper} >\r\n                    <span className={classes.fontInfo} >Schedule:</span> {showDetailsInfo.schedule && showDetailsInfo.schedule.days.map((day, id) => {\r\n                      return (<span key={day}> {day + ' '} </span>)\r\n                    })}\r\n                    {showDetailsInfo && showDetailsInfo.schedule && showDetailsInfo.schedule.time}\r\n                  </Typography>\r\n                </Grid>\r\n              </Grid>\r\n\r\n              {/* Seasons information */}\r\n              <Grid container spacing={3}>\r\n                <Grid item xs={12}>\r\n                  <Paper className={classes.paperCast}>\r\n                    <Typography variant={'h3'} className={classes.headingPaper}>Seasons Information</Typography>\r\n                  </Paper>\r\n                </Grid>\r\n              </Grid>\r\n              {showSeasons ?\r\n                <GridList cellHeight={200} className={classes.gridList} cols={widthSize}  >\r\n                  {\r\n                    showSeasons.map((season) => {\r\n                      return (\r\n                        <GridListTile key={season.id}\r\n                          style={{ padding: '7px' }}>\r\n                            <img src={(season && season.image && season.image.medium) ?\r\n                              season.image.medium : ImageNotFound}\r\n                              alt={'season'} className={classes.movieImage} />\r\n                          <Typography variant={'subtitle2'} className={classes.personName}>{season.name || 'Season ' + season.number}</Typography>\r\n                        </GridListTile>\r\n                      )\r\n                    })\r\n                  }\r\n                </GridList>\r\n                : <div>Seasons information not found</div>}\r\n\r\n\r\n              {/* cast info */}\r\n              <Grid container spacing={1}>\r\n                <Grid item xs={12}>\r\n                  <Paper className={classes.paperCast}>\r\n                    <Typography variant={'h3'} className={classes.headingPaper}>Cast Information</Typography>\r\n                  </Paper>\r\n                </Grid>\r\n              </Grid>\r\n              {showDetailsInfo._embedded ?\r\n                <GridList cellHeight={200} className={classes.gridList} cols={widthSize}>\r\n                  {\r\n                    showDetailsInfo._embedded.cast.map((actor, id) => {\r\n                      return (\r\n                        <GridListTile key={id}\r\n                          style={{ padding: '7px' }}>\r\n                          <img src={(actor.person.image && actor.person.image.medium) ?\r\n                            actor.person.image.medium : ImageNotFound}\r\n                            alt={'cast'} className={classes.movieImage} />\r\n                          <Typography variant={'subtitle2'} className={classes.personName}>{actor.person.name}</Typography>\r\n                        </GridListTile>\r\n                      )\r\n                    })\r\n                  }\r\n                </GridList> :\r\n                <div>Cast information not found</div>\r\n              }\r\n            </div>\r\n          }\r\n          <ScrollToTop smooth style={{ backgroundColor: '#3f50b5', color: \"#0000ff\" }} />\r\n        </div>\r\n      }\r\n    </div>\r\n  );\r\n}","C:\\Users\\Nithish\\Desktop\\ReactApplication\\tv-maze\\src\\components\\showDetails\\ShowList.js",["72","73","74"],"import React, { useEffect, useState } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport GridList from '@material-ui/core/GridList';\r\nimport GridListTile from '@material-ui/core/GridListTile';\r\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\r\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport Pagination from '@material-ui/lab/Pagination';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { Link } from 'react-router-dom';\r\nimport { useStyles } from './ShowListStyles';\r\nimport ImageNotFound from './../../images/imageNotFound.png';\r\nimport ScrollToTop from \"react-scroll-to-top\";\r\nimport { StyledBreadcrumb, useWidth } from './../ScreenWidth';\r\n\r\nexport default function ShowList(props) {\r\n\r\n  const classes = useStyles();\r\n  const [showsInfo, setShowsInfo] = useState([]);\r\n  const [page, setPage] = useState(1);\r\n  const [noOfPages, setNoOfPages] = useState(0);\r\n  const [loader, setLoader] = useState(true);\r\n  const itemsPerPage = props.data && props.data.length > 18 ? 18 : 17;\r\n\r\n  const handleChange = (event, value) => {\r\n    setPage(value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (props.data) {\r\n      setShowsInfo(props.data);\r\n      setLoader(false);\r\n      setNoOfPages(Math.ceil(props.data.length / itemsPerPage))\r\n    }\r\n  }, [setShowsInfo, props]);\r\n\r\n  let widthSize = 2;\r\n  const width = useWidth();\r\n\r\n  if (width === \"xs\") {\r\n    widthSize = 2;\r\n  } else if (width === \"lg\" || width === \"md\" || width === \"xl\") {\r\n    widthSize = 6;\r\n  } else {\r\n    widthSize = 3;\r\n  }\r\n\r\n  return (\r\n    <div>{loader ? <CircularProgress /> :\r\n      <div>\r\n        <div className={classes.root}>\r\n          <Grid container item xs={12} className={classes.breadcrumb} spacing={1} >\r\n            <Breadcrumbs aria-label=\"breadcrumb\">\r\n              <StyledBreadcrumb\r\n                href=\"#\"\r\n                label=\"Home\"\r\n                icon={<HomeIcon fontSize=\"small\" />}\r\n                onClick={() => window.location.reload()}\r\n              />\r\n              {props.genresName &&\r\n                <StyledBreadcrumb label={props.genresName} />}\r\n            </Breadcrumbs>\r\n          </Grid>\r\n\r\n          <GridList data-test=\"grid-list\" cellHeight={300} className={classes.gridList} cols={widthSize}>\r\n            {\r\n              props && props.data.slice((page - 1) * itemsPerPage, page * itemsPerPage).map((tile) => {\r\n                return (\r\n                  <GridListTile\r\n                    key={tile.id}\r\n                    style={{ padding: '6px' }}>\r\n                    <Link to={`/showdetails/${tile.id}`} key={tile.image && tile.image.medium}>\r\n                      <img src={(tile.image && tile.image.medium) ? tile.image && tile.image.medium : ImageNotFound} alt={'image not loaded'}\r\n                        className={classes.movieImage} />\r\n\r\n                    </Link>\r\n                    <GridListTileBar\r\n                      key={tile.id}\r\n                      title={tile.name}\r\n                      subtitle={<div>{tile.genres && tile.genres.map((genres) => {\r\n                        return (\r\n                          <span key={genres}>{genres + ','}</span>\r\n                        )\r\n                      })}</div>}\r\n                      actionIcon={\r\n                        <Button key={tile.image && tile.image.medium} size=\"small\" variant=\"contained\" color=\"primary\" className={classes.icon}>\r\n                          <FavoriteIcon color=\"secondary\" fontSize=\"small\" />\r\n                          {tile.rating.average !== null ? tile.rating.average : 'NA'}\r\n                        </Button>\r\n                      }\r\n                    />\r\n                  </GridListTile>\r\n                )\r\n              })\r\n            }\r\n          </GridList>\r\n\r\n        </div>\r\n        <div className={classes.paginationDiv} data-test=\"pagination-sample1\">\r\n\r\n          {showsInfo.length === 0 ?\r\n            <div data-test=\"pagination-sample\">No movies found</div> :\r\n            <div>\r\n              {showsInfo.length >=16 &&\r\n              <Pagination\r\n              count={noOfPages}\r\n              page={page}\r\n              onChange={handleChange}\r\n              defaultPage={1}\r\n              color=\"primary\"\r\n              size=\"small\"\r\n              showFirstButton\r\n              showLastButton\r\n              classes={{ ul: classes.paginator }}\r\n            />}\r\n            \r\n            </div>}\r\n        </div>\r\n        <ScrollToTop smooth style={{ backgroundColor: '#3f50b5', color: \"#0000ff\" }} />\r\n      </div>}\r\n    </div>\r\n  );\r\n}","C:\\Users\\Nithish\\Desktop\\ReactApplication\\tv-maze\\src\\components\\service.js",[],"C:\\Users\\Nithish\\Desktop\\ReactApplication\\tv-maze\\src\\components\\dashboard\\DashboardStyles.js",[],"C:\\Users\\Nithish\\Desktop\\ReactApplication\\tv-maze\\src\\components\\showDetails\\ShowDetailsStyles.js",[],"C:\\Users\\Nithish\\Desktop\\ReactApplication\\tv-maze\\src\\components\\ScreenWidth.js",[],"C:\\Users\\Nithish\\Desktop\\ReactApplication\\tv-maze\\src\\components\\headerMenu\\HeaderMenu.js",["75","76","77"],"import React, { useState } from 'react';\r\nimport clsx from 'clsx';\r\nimport { useTheme } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport { Link } from 'react-router-dom';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport { InputBase } from '@material-ui/core';\r\nimport { useStyles } from './HeaderMenuStyles';\r\nimport { fetchData } from '../service';\r\n\r\nexport default function HeaderMenu(props) {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [open, setOpen] = useState(false);\r\n  const [values, setValues] = useState({ movieName: '' });\r\n\r\n  const handleDrawerOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleDrawerClose = () => {\r\n    setOpen(false);\r\n  };\r\n  const onSelectGenres = (genres) => {\r\n    if (props.showsInfo) {\r\n      let value = [];\r\n      props.showsInfo.map((data) => {\r\n        data.genres.map((name) => {\r\n          if (name === genres) {\r\n            value.push(data)\r\n          }\r\n        })\r\n      });\r\n      props.filterGenresData(value);\r\n      props.genresName(genres);\r\n      setOpen(false);\r\n    }\r\n  }\r\n\r\n  const handleChange = (prop) => (event) => {\r\n    let genresValue = [];\r\n    fetchData('search', event.target.value).then(data => {\r\n      if (data.length > 0) {\r\n        data.map((result) => {\r\n          genresValue.push(result.show);\r\n        });\r\n        genresValue.sort(function (a, b) {\r\n          return b.rating.average - a.rating.average\r\n        });\r\n      } \r\n\r\n      props.filterShowsData(genresValue);\r\n      props.genresName('')\r\n      if (event.target.value === '') {\r\n        window.location.reload()\r\n        props.genresName('')\r\n      } else {\r\n        setValues({ ...values, [prop]: event.target.value });\r\n      }\r\n    });\r\n  };\r\n  return (\r\n    <div className=\"header-wrapper\">\r\n      <AppBar\r\n        position=\"fixed\"\r\n        className={clsx(classes.appBar, {\r\n          [classes.appBarShift]: open,\r\n        })}\r\n      >\r\n        <Toolbar>\r\n          {!window.location.hash.includes('showdetails') &&\r\n            <IconButton\r\n              data-test=\"drawer-open\"\r\n              color=\"inherit\"\r\n              aria-label=\"open drawer\"\r\n              onClick={handleDrawerOpen}\r\n              edge=\"start\"\r\n              className={clsx(classes.menuButton, open && classes.hide)}\r\n            >\r\n              <MenuIcon />\r\n            </IconButton>\r\n          }\r\n          <Link to=\"/\" className={classes.navigation}>\r\n            <Typography variant=\"h6\" data-test=\"header-text\" className={classes.headerName}>TVMAZE</Typography>\r\n\r\n          </Link>\r\n          {!window.location.hash.includes('showdetails') &&\r\n            <Paper component=\"form\" className={classes.search} style={{ textAlign: 'right' }}>\r\n\r\n              <InputBase\r\n                data-test=\"search-movies\"\r\n                onChange={handleChange('movieName')}\r\n                className={classes.inputSearch}\r\n                placeholder=\"Search movie names...\"\r\n                inputProps={{ 'aria-label': 'search movie' }}\r\n              />\r\n              <IconButton type=\"submit\" className={classes.iconButton} aria-label=\"search\">\r\n                <SearchIcon />\r\n              </IconButton>\r\n              <Divider className={classes.divider} orientation=\"vertical\" />\r\n            </Paper>}\r\n\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Drawer className={classes.drawer} variant=\"persistent\" anchor=\"left\" open={open} data-test=\"drawer-tag\"\r\n        classes={{\r\n          paper: classes.drawerPaper,\r\n        }}\r\n      >\r\n        <div className={classes.drawerHeader}>\r\n          <strong className={classes.genres}>Genres</strong>\r\n          <IconButton onClick={handleDrawerClose} data-test=\"handle-drawer\">\r\n            {theme.direction === 'ltr' ? <ChevronLeftIcon /> : <ChevronRightIcon />}\r\n          </IconButton>\r\n        </div>\r\n        <Divider />\r\n        <div>\r\n          {props.genresInfo && props.genresInfo.length > 0 && props.genresInfo.map((genres) => {\r\n            return (\r\n              <div key={genres} >\r\n                <ListItem button key={genres}>\r\n                  <ListItemText key={genres} data-test=\"genres-selection\" primary={genres} onClick={() => onSelectGenres(genres)} />\r\n                </ListItem>\r\n                <Divider />\r\n              </div>\r\n            )\r\n          })}\r\n        </div>\r\n      </Drawer>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Nithish\\Desktop\\ReactApplication\\tv-maze\\src\\components\\showDetails\\ShowListStyles.js",[],"C:\\Users\\Nithish\\Desktop\\ReactApplication\\tv-maze\\src\\requestApi.js",["78"],"const BASE_URL = 'https://api.tvmaze.com/'\r\nexport default{\r\n    fetchShowsData : BASE_URL+'shows',\r\n    fetchShowsSearchData: BASE_URL+`search/shows?q=`,\r\n    fetchEpisodeData : BASE_URL+`shows/1/episodes?specials=`,\r\n}","C:\\Users\\Nithish\\Desktop\\ReactApplication\\tv-maze\\src\\components\\headerMenu\\HeaderMenuStyles.js",["79"],"import { makeStyles, useTheme } from '@material-ui/core/styles';\r\n\r\nconst drawerWidth = 200;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    appBar: {\r\n        transition: theme.transitions.create(['margin', 'width'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n    },\r\n    appBarShift: {\r\n        width: `calc(100% - ${drawerWidth}px)`,\r\n        marginLeft: drawerWidth,\r\n        transition: theme.transitions.create(['margin', 'width'], {\r\n            easing: theme.transitions.easing.easeOut,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    menuButton: {\r\n        // marginRight: theme.spacing(2),\r\n    },\r\n    hide: {\r\n        display: 'none',\r\n    },\r\n    drawer: {\r\n        width: drawerWidth,\r\n        flexShrink: 0,\r\n    },\r\n    drawerPaper: {\r\n        width: drawerWidth,\r\n    },\r\n    drawerHeader: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        padding: theme.spacing(0, 1),\r\n        // necessary for content to be below app bar\r\n        ...theme.mixins.toolbar,\r\n        justifyContent: 'flex-end',\r\n    },\r\n    popular: {\r\n        paddingLeft: theme.spacing(2)\r\n    },\r\n    genres: {\r\n        paddingRight: theme.spacing(5)\r\n    },\r\n    content: {\r\n        flexGrow: 1,\r\n        padding: theme.spacing(3),\r\n        transition: theme.transitions.create('margin', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n        marginLeft: -drawerWidth,\r\n    },\r\n    contentShift: {\r\n        transition: theme.transitions.create('margin', {\r\n            easing: theme.transitions.easing.easeOut,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n        marginLeft: 0,\r\n    },\r\n    search: {\r\n        padding: '2px 4px',\r\n        display: 'flex',\r\n        width: 400,\r\n        marginLeft: theme.spacing(8)\r\n    },\r\n    inputSearch: {\r\n        marginLeft: theme.spacing(1),\r\n        flex: 1,\r\n    },\r\n    margin: {\r\n        backgroundColor: 'white',\r\n        alignItems: 'right',\r\n        width: '50%',\r\n        margin: '1px',\r\n    },\r\n    iconButton: {\r\n        padding: 10,\r\n    },\r\n    headerName: {\r\n        color: 'white'\r\n    },\r\n    navigation: {\r\n        textDecoration: 'none',\r\n    }\r\n}));\r\n\r\nexport { useStyles };",{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","severity":1,"message":"85","line":11,"column":16,"nodeType":"86","messageId":"87","endLine":11,"endColumn":23},{"ruleId":"88","severity":1,"message":"89","line":22,"column":25,"nodeType":"90","messageId":"91","endLine":22,"endColumn":27},{"ruleId":"88","severity":1,"message":"89","line":23,"column":34,"nodeType":"90","messageId":"91","endLine":23,"endColumn":36},{"ruleId":"84","severity":1,"message":"92","line":1,"column":17,"nodeType":"86","messageId":"87","endLine":1,"endColumn":26},{"ruleId":"93","severity":1,"message":"94","line":74,"column":19,"nodeType":"95","endLine":74,"endColumn":119},{"ruleId":"84","severity":1,"message":"96","line":7,"column":8,"nodeType":"86","messageId":"87","endLine":7,"endColumn":18},{"ruleId":"97","severity":1,"message":"98","line":39,"column":6,"nodeType":"99","endLine":39,"endColumn":27,"suggestions":"100"},{"ruleId":"101","severity":1,"message":"102","line":77,"column":23,"nodeType":"95","endLine":78,"endColumn":58},{"ruleId":"88","severity":1,"message":"89","line":37,"column":34,"nodeType":"90","messageId":"91","endLine":37,"endColumn":36},{"ruleId":"88","severity":1,"message":"89","line":38,"column":32,"nodeType":"90","messageId":"91","endLine":38,"endColumn":34},{"ruleId":"88","severity":1,"message":"89","line":54,"column":27,"nodeType":"90","messageId":"91","endLine":54,"endColumn":29},{"ruleId":"103","severity":1,"message":"104","line":2,"column":1,"nodeType":"105","endLine":6,"endColumn":2},{"ruleId":"84","severity":1,"message":"106","line":1,"column":22,"nodeType":"86","messageId":"87","endLine":1,"endColumn":30},"no-native-reassign",["107"],"no-negated-in-lhs",["108"],"no-unused-vars","'setOpen' is assigned a value but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'useEffect' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Typography' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'itemsPerPage'. Either include it or remove the dependency array.","ArrayExpression",["109"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'useTheme' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"110","fix":"111"},"Update the dependencies array to be: [setShowsInfo, props, itemsPerPage]",{"range":"112","text":"113"},[1525,1546],"[setShowsInfo, props, itemsPerPage]"]